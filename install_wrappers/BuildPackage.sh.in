cd @PROJECT_BINARY_DIR@/3rdparty/spack
rm -f @PROJECT_BINARY_DIR@/3rdparty/spack/results.txt
lfs setstripe -c 1 @PROJECT_BINARY_DIR@/3rdparty/spack 
echo "======== Downloading @BUILD_PACKAGE@ ========"
#@PROJECT_BINARY_DIR@/3rdparty/spack/bin/spack --insecure mirror create -d @PROJECT_BINARY_DIR@/3rdparty/spack/localmirror -D @BUILD_PACKAGE@ @PACKAGE_PARAMETERS@ %gcc@4.9.3
echo "======== Launching Build Job ========"
@PROJECT_BINARY_DIR@/3rdparty/spack/bin/spack install @BUILD_PACKAGE@ @PACKAGE_PARAMETERS@ %gcc@4.9.3
echo "======== Getting cudadedup ========"
yes | @PROJECT_BINARY_DIR@/3rdparty/spack/bin/spack -d uninstall --all cudadedup
@PROJECT_BINARY_DIR@/3rdparty/spack/bin/spack -d install --restage cudadedup %gcc@4.9.3
source @PROJECT_BINARY_DIR@/wrappers/SetModuleEnv.sh
rm -f ./load_modules.sh
python @PROJECT_BINARY_DIR@/wrappers/LoadSpackModules.py
source ./load_modules.sh
rm -f ./load_modules.sh
CUDADEDUP=$CUDADEDUP_PATH
mkdir @PROJECT_BINARY_DIR@/libcuda_detect
rm -f @PROJECT_BINARY_DIR@/libcuda_detect/libcuda.so
rm -f @PROJECT_BINARY_DIR@/libcuda_detect/libcuda.so.1
bash $CUDADEDUP/bin/inst_app.sh /opt/cray/nvidia/default/lib64/libcuda.so.1 $CUDADEDUP/defs/DetectDuplicates.def @PROJECT_BINARY_DIR@/libcuda_detect/libcuda.so.1
cp @PROJECT_BINARY_DIR@/libcuda_detect/libcuda.so.1 @PROJECT_BINARY_DIR@/libcuda_detect/libcuda.so
